import Recipe from "../models/recipes";
import { queryRecipes } from "../helpers/openai";
import { translate } from "../helpers/translation";

export const translateRecipe = async (recipe, fromLanguage) => {
  const translatedName = await translate(recipe.name, fromLanguage);
  const translatedMaterials = await Promise.all(
    recipe.materials.map(
      async (material) => await translate(material, fromLanguage)
    )
  );
  const translatedIngredients = await Promise.all(
    recipe.ingredients.map(
      async (ingredient) => await translate(ingredient, fromLanguage)
    )
  );
  const translatedSteps = await Promise.all(
    recipe.steps.map(async (step) => await translate(step, fromLanguage))
  );
  const translatedDescription = await translate(
    recipe.description,
    fromLanguage
  );

  const translatedRecipe = new Recipe({
    ...recipe,
    name: translatedName,
    materials: translatedMaterials,
    ingredients: translatedIngredients,
    steps: translatedSteps,
    description: translatedDescription,
    language: "ja",
  });

  translatedRecipe.save();
  return translatedRecipe;
};

export const generateRecipe = async (ingredients, user) => {
  const recipeQueryResult = await queryRecipes(ingredients);
  const generatedRecipe = {
    ...recipeQueryResult,
    user,
    wasAutogenerated: true,
    generatedWith: ingredients,
  };

  const translatedRecipePromise = translateRecipe(generatedRecipe, "en");

  const recipe = new Recipe(generatedRecipe);

  recipe.save();

  return user.language !== "ja" ? recipe : await translatedRecipePromise;
};

export const addRecipe = async (recipe, language) => {
  translateRecipe(recipe, language);

  const newRecipe = new Recipe(recipe);
  await newRecipe.save();
};

export const updateRecipe = async (recipe) => {
  const updatedRecipe = await Recipe.findByIdAndUpdate(
    { _id: recipe.id },
    recipe
  );
  return updatedRecipe;
};

export const findRecipesWithIngredients = async (ingredients) => {
  if (ingredients === "all") {
    const recipes = await Recipe.find({}).sort({
      name: 1,
    });
    return recipes;
  }

  const ors = ingredients.split("|").map((exp) => {
    return {
      $and: exp.split("&").map((exp) => {
        return {
          $or: [
            { name: { $regex: exp, $options: "i" } },
            { ingredients: { $regex: exp, $options: "i" } },
          ],
        };
      }),
    };
  });

  const filters = [
    {
      $match: {
        $or: ors,
      },
    },
  ];

  const recipes = await Recipe.aggregate(filters, function (err, results) {});
  return recipes;
};

export const getRecipeById = async (id) => await Recipe.findById(id);

export const getRecipes = async () => await Recipe.find({}).sort({ name: 1 });

export const deleteRecipe = async (id) => {
  await Recipe.deleteOne({ _id: id });
};
